using Microsoft.AspNetCore.Mvc;
using MinhaAplicacao.DataContext;

namespace MinhaAplicacao.Controllers
{
    public class ProdutosController : Controller
    {
        private readonly IProdutoRepository _produtoRepository;

        public ProdutosController(IProdutoRepository produtoRepository)
        {
            _produtoRepository = produtoRepository;
        }

        public async Task<IActionResult> Index(int page = 1, int pageSize = 10)
        {
            try
            {
                var produtos = await _produtoRepository.GetProdutosAsync(page, pageSize);
                var produtosDTOs = produtos.Select(p => new ProdutoDTO
                {
                    ID = p.ID,
                    Descricao = p.Descricao,
                    Unidade = p.Unidade
                }).ToList();

                return View(produtosDTOs);
            }
            catch (Exception ex)
            {
                // Log the error here
                return View("Error", new ErrorViewModel { Message = ex.Message });
            }
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(ProdutoDTO produtoDTO)
        {
            if (!ModelState.IsValid)
            {
                return View(produtoDTO);
            }

            try
            {
                var produto = new Produto
                {
                    Descricao = produtoDTO.Descricao,
                    Unidade = produtoDTO.Unidade
                };

                await _produtoRepository.AddProdutoAsync(produto);

                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                // Log the error here
                return View("Error", new ErrorViewModel { Message = ex.Message });
            }
        }
    }

    public class ErrorViewModel
    {
        public string Message { get; set; }
    }

    public class ProdutoDTO
    {
        public int ID { get; set; }
        public string Descricao { get; set; }
        public string Unidade { get; set; }
    }

    public interface IProdutoRepository
    {
        Task<List<Produto>> GetProdutosAsync(int page, int pageSize);
        Task AddProdutoAsync(Produto produto);
    }

    public class ProdutoRepository : IProdutoRepository
    {
        private readonly DesenvolvimentoContext _context;

        public ProdutoRepository(DesenvolvimentoContext context)
        {
            _context = context;
        }

        public async Task<List<Produto>> GetProdutosAsync(int page, int pageSize)
        {
            return await _context.Produtos.Skip((page - 1) * pageSize).Take(pageSize).ToListAsync();
        }

        public async Task AddProdutoAsync(Produto produto)
        {
            _context.Produtos.Add(produto);
            await _context.SaveChangesAsync();
        }
    }

    public class DesenvolvimentoContext : DbContext
    {
        public DbSet<Produto> Produtos { get; set; }

        public DesenvolvimentoContext(DbContextOptions<DesenvolvimentoContext> options) : base(options)
        {
        }

        internal Task SaveChangesAsync()
        {
            throw new NotImplementedException();
        }
    }

    public class Produto
    {
        public int ID { get; set; }
        public string Descricao { get; set; }
        public string Unidade { get; set; }
    }
}
