using Microsoft.AspNetCore.Mvc;
using MinhaAplicacao.Models;
using MinhaAplicacao.Repositories;
using System.ComponentModel.DataAnnotations;

namespace MinhaAplicacao.Models
{
    public class Produto
    {
        public int ID { get; set; }

        [Required(ErrorMessage = "A descrição do produto é obrigatória.")]
        public string Descricao { get; set; }

        [Required(ErrorMessage = "A unidade do produto é obrigatória.")]
        public string Unidade { get; set; }
    }

    public class Pedido
    {
        public int ID { get; set; }

        [Required(ErrorMessage = "A data do pedido é obrigatória.")]
        public DateTime Data { get; set; }

        [Required(ErrorMessage = "O fornecedor do pedido é obrigatório.")]
        public int FornecedorID { get; set; }

        public Fornecedor Fornecedor { get; set; }

        public ICollection<PedidoItem> Itens { get; set; }
    }

    public class Fornecedor
    {
        public int ID { get; set; }

        [Required(ErrorMessage = "A razão social do fornecedor é obrigatória.")]
        public string RazaoSocial { get; set; }

        [Required(ErrorMessage = "O CNPJ do fornecedor é obrigatório.")]
        public string CNPJ { get; set; }

        public ICollection<Pedido> Pedidos { get; set; }
    }

    public class PedidoItem
    {
        public int ID { get; set; }

        [Required(ErrorMessage = "O pedido do item é obrigatório.")]
        public int PedidoID { get; set; }

        public Pedido Pedido { get; set; }

        [Required(ErrorMessage = "O produto do item é obrigatório.")]
        public int ProdutoID { get; set; }

        public Produto Produto { get; set; }

        [Required(ErrorMessage = "A quantidade do item é obrigatória.")]
        public int Quantidade { get; set; }

        [Required(ErrorMessage = "O valor do item é obrigatório.")]
        public decimal Valor { get; set; }
    }
}

namespace MinhaAplicacao.Repositories
{
    public class MeuContextoRepository : IDisposable
    {
        private readonly MeuContexto db = new MeuContexto();

        public IQueryable<Produto> GetProdutos()
        {
            return db.Produtos;
        }

        public void AddProduto(Produto produto)
        {
            db.Produtos.Add(produto);
            db.SaveChanges();
        }

        public void Dispose()
        {
            db.Dispose();
        }
    }

    internal class MeuContexto
    {
        public IQueryable<Produto> Produtos { get; internal set; }

        internal void Dispose()
        {
            throw new NotImplementedException();
        }

        internal void SaveChanges()
        {
            throw new NotImplementedException();
        }
    }
}

namespace MinhaAplicacao.Controllers
{
    public class ProdutosController : Controller
    {
        private readonly MeuContextoRepository repository = new();

        public IActionResult Index()
        {
            var produtos = repository.GetProdutos().ToList();
            return View(produtos);
        }

        [HttpGet]
        public
    }
}
